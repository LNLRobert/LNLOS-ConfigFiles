# A helper script to activate copy mode
[gcode_macro ACTIVATE_COPY_MODE]
gcode:
    G90
    G1 Z+10 F1050
    {% set xoffsetpos = printer["gcode_macro LNLOS"].copy_mode_xoffset|float|default(150) %}
    RESPOND TYPE=echo MSG="ACTIVATING COPY MODE"
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X0 F9000
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X{xoffsetpos} F9000
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1
    _IDEX_MODE MODE=1


# A helper script to activate mirror mode
[gcode_macro ACTIVATE_MIRROR_MODE]
gcode:
    G90
    G1 Z+10 F1050
    {% set xoffsetpos = printer["gcode_macro LNLOS"].mirror_mode_xoffset|float|default(300) %}
    RESPOND TYPE=echo MSG="ACTIVATING MIRROR MODE"   
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X0 F9000
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X{xoffsetpos} F9000
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1
    _IDEX_MODE MODE=2
    
[gcode_macro ACTIVATE_DUAL_MATERIAL_MODE]
gcode: 
    RESPOND TYPE=echo MSG="ACTIVATING DUAL MATERIAL MODE" 
    G28
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    _IDEX_MODE MODE=0

#here, 0 indicates dual material print mode, 1 = copy, 2 = mirror
[gcode_macro _IDEX_MODE]
description: sets variable value for idex mode. 0 for dual material, 1 for copy, 2 for mirror. Usage: _IDEX_MODE MODE=<modenum>
variable_idex_mode: 0
gcode:
  {% set mode = params.MODE|int|default(0) %}

  {% if mode == 0 %}
    RESPOND TYPE=echo MSG="Storing Idex Mode as Dual Material"
  {% elif mode == 1 %}
    RESPOND TYPE=echo MSG="Storing Idex Mode as COPY"
  {% elif mode == 2 %}
    RESPOND TYPE=echo MSG="Storing Idex Mode as MIRROR"
  {% else %}
    RESPOND TYPE=echo MSG="INVALID IDEX MODE, reverting to dual material mode"
    mode=0
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_IDEX_MODE VARIABLE=idex_mode VALUE={mode}
  _SAVE_LNLOS


[gcode_macro _RESTORE_IDEX_MODE]
gcode:
    #RESPOND TYPE=error MSG="RESTORING IDEX MODE" 
    {% set PRINT_MODE = printer["gcode_macro _IDEX_MODE"].idex_mode %}
    {% if PRINT_MODE == 0 %}
      ACTIVATE_DUAL_MATERIAL_MODE
    {% elif PRINT_MODE == 1 %}
      #RESPOND TYPE=error MSG="RESTORING COPY MODE" 
      ACTIVATE_COPY_MODE
    {% elif PRINT_MODE == 2 %}
      #RESPOND TYPE=error MSG="RESTORING MIRROR MODE" 
      ACTIVATE_MIRROR_MODE
    {% endif %}



[gcode_macro SET_IDEX_E2_OFFSET]
variable_idex_x_offset: 0
variable_idex_y_offset: 0
gcode: 
  {% set svlnl = printer.save_variables.variables %}
  {% set X_OFFSET = params.XOFFSET|float|default(svlnl.idex_x_offset) %}
  {% set Y_OFFSET = params.YOFFSET|float|(svlnl.idex_y_offset) %}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=idex_x_offset VALUE=X_OFFSET
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=idex_y_offset VALUE=Y_OFFSET
  M117 Setting E2 GCode offset
  #RESPOND TYPE=echo MSG="Idex Offset set to {X_OFFSET}, {Y_OFFSET}"


### ------------------------------ ###
# Activate the primary extruder
# Activate the primary extruder
[gcode_macro T0]
description: Activates E1 and clears gcode offsets for idex
# set up to ignore T0 and T1 if unit is actively in mirror or copy mode
gcode:   
        SET_GCODE_OFFSET X=0 Y=0
        HOME_IF_NOT
    	{% if printer.toolhead.extruder != "extruder" %}
    	    PARK_extruder1
    	{% endif %}
        {% if printer["gcode_macro _IDEX_MODE"].idex_mode == 0 %}
            SET_DUAL_CARRIAGE CARRIAGE=0
            ACTIVATE_EXTRUDER EXTRUDER=extruder
          {% if printer.idle_timeout.state != "Printing"%}
            RESPOND TYPE=echo MSG="E1 is now the active extruder" 
          {% endif %}
        {% endif %}




        
    #{% if printer["gcode_macro _IDEX_MODE"].idex_mode == 0 %}
    #	RESPOND MSG="Selecting first extruder (T0)"
    #	HOME_IF_NOT
#
#        SET_DUAL_CARRIAGE CARRIAGE=0
#        #CLEAR_GCODE_OFFSETS
#    	# run the range setting only once, in order not to mis-set it after T1 target temp is set to zero
#    	{% if  printer["gcode_macro _initial_t0"].range_set  == 0  %}
#    		RESPOND TYPE=echo MSG="Lefttmost extruder X-direction movement range not yet set, setting it now"
#    		_initial_t0
#    	{% endif %}   	
#    {% else %}
#    RESPOND TYPE=echo MSG="Unit Currently in Mirror or Copy mode, ignoring T0"
#    {% endif %}

[gcode_macro _clear_xy_offsets]
gcode:
  SET_GCODE_OFFSET X=0 Y=0  

  
### ------------------------------ ###
# activate secondary toolhead
[gcode_macro T1]
description: Activates E2 and applies gcode offset for idex
gcode:
   {% set idex_x = printer["gcode_macro LNLOS"].idex_x_offset|float %}
   {% set idex_y = printer["gcode_macro LNLOS"].idex_y_offset|float %}
   SET_GCODE_OFFSET X={idex_x} Y={idex_y}
   HOME_IF_NOT
       {% if printer.toolhead.extruder != "extruder1" %}
         PARK_extruder
       {% endif %}
   {% if printer["gcode_macro _IDEX_MODE"].idex_mode == 0 %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder1
      SET_DUAL_CARRIAGE CARRIAGE=1
    {% if printer.idle_timeout.state != "Printing"%}
      RESPOND TYPE=echo MSG="E2 is now the active extruder" 
    {% endif %}
  {% elif printer["gcode_macro _IDEX_MODE"].idex_mode != 0 %}
    {% if printer.idle_timeout.state != "Printing"%}
      RESPOND TYPE=echo MSG="Please switch back to dual material mode to independently control e2" 
    {% endif %}
  {% endif %}



    
#    {% if printer["gcode_macro _IDEX_MODE"].idex_mode == 0 %}
#    {% set idex_x = printer["gcode_macro LNLOS"].idex_x_offset|float %}
#    {% set idex_y = printer["gcode_macro LNLOS"].idex_y_offset|float %}
#    RESPOND MSG="Selecting second extruder (T1)"#


      #The X/Y offsets are opposite from the stock firmware method.
      #If the E2 prints too far to the left, you must ADD to the X offset.
      #If the E2 prints too far downwards, you must ADD to the Y offset.
      #The Z offset usually isn't needed. Just calibrate the physical Z adjustment on E2.
#      {% set PRINT_MODE = printer["gcode_macro _IDEX_MODE"].idex_mode %}
#      {% if PRINT_MODE == 0 %}
#        SET_GCODE_OFFSET X={idex_x} Y={idex_y} #Z={idex_z} #x was 3.8
#      {% endif %}
#    {% else %}
#      RESPOND TYPE=echo MSG="Unit Currently in Mirror or Copy mode, ignoring T0"
#    {% endif %}


[gcode_macro CLEAR_GCODE_OFFSETS]
gcode:
    SET_GCODE_OFFSET X=0 Y=0 Z=0

# Helper script to park the carriage (called from T0 and T1 macros)
[gcode_macro PARK_extruder]
gcode:
	M117 Parking the leftmost extruder (E1)
	#make sure we move the first carriage
	SET_DUAL_CARRIAGE CARRIAGE=0
	{% if not "x" in printer.toolhead.homed_axes %}
	    RESPOND MSG="Homing X"
	    G28 X
	{% endif %}
    SAVE_GCODE_STATE NAME=park0
    G90
	SET_GCODE_OFFSET X=0 Y=0 #Z=0
    G1 X{printer.configfile.settings.stepper_x.position_min} F15000
    RESTORE_GCODE_STATE NAME=park0

[gcode_macro PARK_extruder1]
gcode:
	M117 Parking the rightmost extruder (E2)
	#make sure we move the second carriage. After all, we do not know which carriage is active
	SET_DUAL_CARRIAGE CARRIAGE=1
	{% if not "x" in printer.toolhead.homed_axes %}
	    RESPOND MSG="Homing X"
	    G28 X
	{% endif %}
    SAVE_GCODE_STATE NAME=park1
    G90
	SET_GCODE_OFFSET X=0 Y=0 #Z=0
    G1 X{printer.configfile.settings.dual_carriage.position_max} F15000
    RESTORE_GCODE_STATE NAME=park1

### ------------------------------ ###
[gcode_macro _set_stepper_x_range]
variable_xoffset: 0
variable_range_set: 0
gcode:
  RESPOND MSG="Setting leftmost extruder x-axis origin"
  #	{ action_respond_info("Extruder1 temperature target: %s" % printer.extruder1.target ) }
	RESPOND MSG="Extruder1 temperature target: { printer.extruder1.target }"
	{% if   printer.extruder1.target|int > 0 %}
 		RESPOND MSG="Right hand side extruder active"
	    #{% set offset= 17 %}
	    {% set offset= 0 %} #I don't know why it was setting this to 17, but it was messing up my prints sometimes!
	{% else %}
	    {% set offset=0 %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_set_stepper_x_range VARIABLE=xoffset VALUE={offset}
	RESPOND MSG="X origin for left head will be set to {offset} mm from left end of bed"
	#make it known that the range has been set for this print, and should not be re-evaluated again
	SET_GCODE_VARIABLE MACRO=_set_stepper_x_range VARIABLE=range_set VALUE=1

### ------------------------------ ###
[gcode_macro _clear_stepper_x_range]
gcode:
  RESPOND MSG="Clearing the leftmost extruder x-axis printing range"
	SET_GCODE_VARIABLE MACRO=_set_stepper_x_range VARIABLE=xoffset VALUE=0
	#make it known that the range has not been set for this print, and should be re-evaluated again
	SET_GCODE_VARIABLE MACRO=_set_stepper_x_range VARIABLE=range_set VALUE=0


[gcode_macro calibrate_z_e2]
gcode:
    G28
    T1
  {% if printer["gcode_macro _IDEX_MODE"].idex_mode == 0 %}
    G1 Z+10 F1050
    G1 X150 Y150 F6000
    G1 Z0 F500
    RESPOND MSG="Please Adjust Wheel at back of E2 once nozzle is above bed"
  {% endif %}